<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="ToolsCodeTemplate.cs" Inherits="ToolsCodeTemplate" %>
<%@ Property Name="Table" Type="SchemaExplorer.TableSchema" Category="DB" %>

<script runat="template">
    public override string GetFileName()
    {
    	return Table.Name + "Repository.cs";
    }
</script>
<% 
    string entity=Table.Name.Replace("weapp_","");
    
    string a = Table.Name.Replace("weapp_","");
    
    string b = a[0].ToString().ToUpper() + a.Substring(1);
    
    string dalName = b + "Repository";
%>
using System;   
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Weapp.Model;
using Dapper;

namespace Weapp.Repository
{
    <%PrintHeader("模板生成方法，对应"+Table.Name+"表基础增、删、改、查、等方法。"); %>
    
    /// <summary>
    /// 表名:<%=Table.Name %>
    /// 描述:<%=Table.Description %>
    /// 主键和自增:<%if(!Table.HasPrimaryKey) {%>无主键<%} %> <%if(!HasIdentity(Table)) {%>无自增字段<%} %>
    /// </summary>
    public partial class <%=dalName %> : I<%=dalName %>
    {
        
        protected readonly IWeDbContext _db;
        public <%=dalName %>(IWeDbContext dbcontext)
        {
            this._db = dbcontext;
        }
        
        <%if(HasIdentity(Table)) {%>
        public <%=GetIdentityType(Table) %> Insert(<%=entity%> entity)
        {
            string sql = "INSERT INTO `<%=Table.Name%>` (<%=GetFields(Table) %>) VALUES (<%=GetValues(Table) %>);SELECT @@IDENTITY";
            return _db.Conn.ExecuteScalar<<%=GetIdentityType(Table) %>>(sql, entity);
        }
        
        public int InsertIdentity(<%=entity%> entity)
        {
            string sql = "INSERT INTO `<%=Table.Name%>` (<%=GetFields(Table, true) %>) VALUES (<%=GetValues(Table, true) %>)";
            return _db.Conn.Execute(sql, entity);
        }
        <%} else{%>
        public int Insert(<%=entity%> entity)
        {
            string sql = "INSERT INTO `<%=Table.Name%>` (<%=GetFields(Table) %>) VALUES (<%=GetValues(Table) %>)";
            return _db.Conn.Execute(sql, entity);
        }
        <%} %>
        
        public int UpdateAll(<%=entity%> entity, string updateFields = null)
        {
            if (updateFields == null)
            {
                updateFields = "<%=GetValuesEquals_NoPI(Table)%>";
            }
            else
            {
                updateFields = StringHelper.SqlUpdateFieldsForMySql(updateFields);
            }
            string sql = "UPDATE `<%=Table.Name%>` SET " + updateFields;
            return _db.Conn.Execute(sql, entity);
        }
        
        public int UpdateFieldsByWhere(<%=entity%> entity, string whereFields, string updateFields = null)
        {
            if (updateFields == null)
            {
                updateFields = "<%=GetValuesEquals_NoPI(Table)%>";
            }
            else
            {
                updateFields = StringHelper.SqlUpdateFieldsForMySql(updateFields);
            }
            string where = "WHERE " + StringHelper.SqlWhereFieldsForMySql(whereFields);
            string sql = string.Format("UPDATE `<%=Table.Name%>` SET {0} " + where, updateFields);
            return _db.Conn.Execute(sql, entity);
        }
        
        public int DeleteAll()
        {
            string sql = "DELETE FROM `<%=Table.Name%>`";
            return _db.Conn.Execute(sql);
        }
        
        <%if(Table.HasPrimaryKey) {%>
        public int DeleteById(<%=GetPKType(Table)%> <%=GetPKName(Table)%>)
        {
            string sql = "DELETE FROM `<%=Table.Name%>` WHERE `<%=GetPKName(Table)%>` = @<%=GetPKName(Table)%>";
            return _db.Conn.Execute(sql, new { <%=GetPKName(Table)%> = <%=GetPKName(Table)%> });
        }
        
        public bool DeleteByIds(List<<%=GetPKType(Table)%>> ids)
        {
            if (ids.Count == 0) return false;
            string sql = "DELETE FROM `<%=Table.Name%>` WHERE `<%=GetPKName(Table)%>` IN @ids";
            return _db.ExecuteTransaction(sql, new { ids = ids });
        }
        <%} %>
        
        public IEnumerable<T> QueryAll<T>(string returnFields = null, int top = -1, string orderBy = null)
        {
            if (returnFields == null)
            {
                returnFields = "<%=GetFields(Table, true)%>";
            }
            if (orderBy != null)
            {
                orderBy = " ORDER BY " + orderBy + " ";
            }
            string topN = null;
            if (top != -1)
            {
                topN = " LIMIT " + top; 
            }
            string sql = "SELECT " + returnFields + " FROM `<%=Table.Name%>`" + orderBy + topN;
            return _db.Conn.Query<T>(sql);
        }
        
        <%if(Table.HasPrimaryKey) {%>
        public T QueryById<T>(<%=GetPKType(Table)%> <%=GetPKName(Table)%>, string returnFields = null)
        {
            if (returnFields == null)
            {
                returnFields = "<%=GetFields(Table, true)%>";
            }
            string sql = "SELECT " + returnFields + " FROM `<%=Table.Name%>` WHERE `<%=GetPKName(Table)%>` = @<%=GetPKName(Table)%>";
            return _db.Conn.Query<T>(sql, new { <%=GetPKName(Table)%> = <%=GetPKName(Table)%> }).FirstOrDefault();
        }
        
        public IEnumerable<T> QueryByIds<T>(List<<%=GetPKType(Table)%>> ids, string returnFields = null, string orderBy = null)
        {
            if (ids.Count == 0) return new List<T>();
            if (returnFields == null)
            {
                returnFields = "<%=GetFields(Table, true)%>";
            }
            if (orderBy != null)
            {
                orderBy = " ORDER BY " + orderBy;
            }
            string sql = "SELECT " + returnFields + " FROM `<%=Table.Name%>` WHERE `<%=GetPKName(Table)%>` IN @ids" + orderBy;
            return _db.Conn.Query<T>(sql, new { ids = ids });
        }
        <%} %>
        
        
        
        
        //PageInfo参数必须是dynamic par = new ExpandoObject();
        public void QueryByPage<T>(PageInfo<T> pageinfo, bool getTotal = true)
        {
            if (pageinfo.ReturnFields == null)
            {
                pageinfo.ReturnFields = "<%=GetFields(Table, true)%>";
            }
            if (pageinfo.Where != null)
            {
                pageinfo.Where = "WHERE " + pageinfo.Where;
            }
            if (pageinfo.OrderBy != null)
            {
                pageinfo.OrderBy = "ORDER BY " + pageinfo.OrderBy;
            }
            <%if(Table.HasPrimaryKey) {%>
            else
            {
                pageinfo.OrderBy = "ORDER BY `<%=GetPKName(Table)%>` DESC"; 
            }
            <%} %>
            
            string sql = null;
            if (getTotal)
            {
                sql = string.Format("SELECT count(1) FROM `<%=Table.Name%>` {0};SELECT {2} FROM `<%=Table.Name%>` {0} {1} LIMIT @skip,@take", pageinfo.Where, pageinfo.OrderBy, pageinfo.ReturnFields);
            }
            else
            {
                sql = string.Format("SELECT {0} FROM `<%=Table.Name%>` {1} {2} LIMIT @skip,@take", pageinfo.ReturnFields, pageinfo.Where, pageinfo.OrderBy);
            }

            using (var conn = _db.Conn.CreateConnection())
            {
                Dapper.SqlMapper.GridReader Reader = null;

                if (pageinfo.Params == null)
                {
                    Reader = conn.QueryMultiple(sql, new { skip = pageinfo.Skip, take = pageinfo.Take });
                }
                else
                {
                    pageinfo.Params.skip = pageinfo.Skip;
                    pageinfo.Params.take = pageinfo.Take;
                    Reader = conn.QueryMultiple(sql, (object)pageinfo.Params);
                }

                if (getTotal)
                {
                    pageinfo.Total = Reader.Read<long>().FirstOrDefault();
                    pageinfo.Data = Reader.Read<T>();
                }
                else
                {
                    pageinfo.Data = Reader.Read<T>();
                }
                
                Reader.Dispose();
            }

        }
    }
    
}